#include <stdio.h> // in out
#include "stdlib.h" // for dynamic allocation
#include <time.h> // to compute time
#include "math.h" // math functions


int nDimIn= 4;
int nDimOut=1;
int nLayers = 1;

int calcNumWeights(int *nNeurons){
    int nWeights=0; int i=0;
    nWeights = (nDimIn+1)*(*nNeurons);
    for(i=1;i<nLayers;i++){ nWeights += (*(nNeurons+i-1)+1)*(*(nNeurons+i)); } nWeights += (*(nNeurons+i-1)+1)*nDimOut;
return nWeights;
}

double tansig(double n){
    return 2/(1+exp(-2*n))-1;
}

double dotProd(int n, double *x, double *y){
int i=0;
double sum=0;
for(i=0;i<n;i++){sum+= *(x+i)*(*(y+i)); }
return sum;
}

int main(void)
{
    int i=0;
    double b=0;
    int *nNeurons = 0;
    int nWeights = 0;
    double *weights =0;
    clock_t tic, toc;

    nNeurons = (int*) calloc(sizeof(int),nLayers+1); //number of neurons per layer

    for(i=0; i<nLayers;i++){*(nNeurons+i)=48; } //set the number of neurons per layer

    // calculate the number of weights
    nWeights = calcNumWeights(nNeurons);

    printf("nWeights is %i \n",nWeights);
    weights = (double*) calloc(sizeof(double),nWeights); //this includes the biases.

    for(i=0;i<nWeights;i++){nWeights=1; }

    tic = clock(); //CLOCKS_PER_SEC
    toc = clock();

    //calculate first layer
    b=*(weights+*(nNeurons+1));
    for(i=0;i<*(nNeurons);i++){

    }

    double *temp=0; calloc(sizeof(double),nDimIn);
    for(i=0;i<10;i++){
        temp =
    }

    free(nNeurons); free(weights);

    return 0;
}
